.macro    PushImm        $number
    li          t0, $number
    sw          t0, (sp)
    addi        sp, sp, -4
.end_macro

.macro    PushReg        $reg
    sw          $reg, (sp)
    addi        sp, sp, -4
.end_macro

.macro    PopReg        $reg
    lw          $reg, 4(sp)
    addi        sp, sp, 4
.end_macro

.macro    Discard        $bytes
    addi        sp, sp, $bytes
.end_macro

.macro    Popt1t2
    lw          t1, 4(sp)
    addi        sp, sp, 4
    lw          t2, 4(sp)
    addi        sp, sp, 4
.end_macro

.macro CompLE
    Popt1t2
    li          t0, 1
    sw          t0, (sp)
    ble         t1, t2, exit
    sw          zero, (sp)
exit:
    addi        sp, sp, -4
.end_macro

.macro    Plus
    Popt1t2
    add         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Minus
    Popt1t2
    sub         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    LogicalAnd
    Popt1t2
    and         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    LogicalXor
    Popt1t2
    xor         t1, t1, t2
    sw          t1, (sp)
    addi        sp, sp, -4
.end_macro

.macro    Jump        $address
    j           $address
.end_macro

.macro    JumpTrue    $address
    lw          t1, 4(sp)
    addi        sp, sp, 4
    beqz        t1, exit
    j           $address
exit:
.end_macro

main:
    lw          ra, 4(sp)
    addi        sp, sp, 4
    lw          x10, 4(sp)
    addi        sp, sp, 4
    addi        sp, sp, 4
    PushImm     0
    lw          x11, 4(sp)
    addi        sp, sp, 4
    PushImm     1
    lw          x12, 4(sp)
    addi        sp, sp, 4
label_0:
    PushReg     x10
    PushReg     x12
    CompLE
    PushImm     1
    LogicalXor
    JumpTrue    label_1
    PushReg     x12
    PushReg     x11
    Plus
    PopReg      x11
    PushImm     1
    PushReg     x12
    Plus
    PopReg      x12
    Jump        label_0
label_1:
    PushReg     x11
    ret
